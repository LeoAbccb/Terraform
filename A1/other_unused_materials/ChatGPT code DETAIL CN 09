>
你好，我们现在开始用python,docker和flask制作网站。
我需要做一个用户登录系统和一个餐厅登录系统。餐厅登录系统为企业账号，用户登录系统为普通用户。
但是在我创建两个类之后,发生了错误，无法登录
它说:
"UndefinedError
jinja2.exceptions.UndefinedError: 'app.models.User object' has no attribute 'followers''"
我该如何解决这个问题？谢谢!
以下是我的部分model.py內容:

<
你好，根据你提供的错误信息，这个问题是由于Jinja2模板引擎在渲染页面时，尝试访问一个app.models.User对象的followers属性，但是这个属性不存在。在你提供的model.py代码中，的确没有为User类定义名为followers的属性。

为了解决这个问题，请检查你的Jinja2模板文件（通常是以.html为扩展名的文件），找到尝试访问followers属性的地方。根据你的代码，可能你想访问的是followed属性，而不是followers。因此，你需要将模板中的followers替换为followed。如果仍然存在问题，请提供涉及的Jinja2模板文件以便进一步分析。

另外，还要确保在你的视图函数中，你已经正确地传递了User对象到模板中。 示例：
from flask import render_template
from app.models import User

@app.route('/some_route')
def some_route():
    user = User.query.get(some_user_id)
    return render_template('your_template.html', user=user)
    
这样，在Jinja2模板中，你就可以访问user对象及其属性了。
>
你好，我们现在开始用python,docker和flask制作网站。
我需要做一个用户登录系统和一个餐厅登录系统。餐厅登录系统为企业账号，用户登录系统为普通用户。
当进入 index.html 时，普通用户可以编辑个人资料，企业账号可以编辑餐厅资料，当普通用户进入企业账号餐厅资料页面时，普通用户可以预订餐厅安排的座位。
请问我该如何做到这个效果？谢谢!
以下是我的部分models.py內容:
followers = db.Table(
    'followers',
    db.Column('follower_id', db.Integer, db.ForeignKey('user.id')),
    db.Column('followed_id', db.Integer, db.ForeignKey('user.id'))
)


class User(UserMixin, db.Model):
    id = db.Column(db.Integer, primary_key=True)
    username = db.Column(db.String(64), index=True, unique=True)
    email = db.Column(db.String(120), index=True, unique=True)
    password_hash = db.Column(db.String(128))
    posts = db.relationship('Post', backref='author', lazy='dynamic')
    about_me = db.Column(db.String(140))
    last_seen = db.Column(db.DateTime, default=datetime.utcnow)
    user_type = db.Column(db.String(100))
    followed = db.relationship(
        'User', secondary=followers,
        primaryjoin=(followers.c.follower_id == id),
        secondaryjoin=(followers.c.followed_id == id),
        backref=db.backref('followers', lazy='dynamic'), lazy='dynamic')

    def __repr__(self) -> str:
        return f'<User {self.username}>'

    def set_password(self, password):
        self.password_hash = generate_password_hash(password)

    def check_password(self, password):
        return check_password_hash(self.password_hash, password)

    def avatar(self, size):
        digest = md5(self.email.lower().encode("utf-8")).hexdigest()
        return 'https://www.gravatar.com/avatar/{}?d=identicon&s={}'.format(
            digest, size)

    def follow(self, user):
        if not self.is_following(user):
            self.followed.append(user)

    def unfollow(self, user):
        if self.is_following(user):
            self.followed.remove(user)

    def is_following(self, user):
        return self.followed.filter(followers.c.followed_id == user.id).count() > 0

    def followed_posts(self):
        followed = Post.query.join(
            followers, followers.c.followed_id == Post.user_id
        ).filter(followers.c.follower_id == self.id)
        own = Post.query.filter_by(user_id=self.id)
        return followed.union(own).order_by(Post.timestamp.desc())

    def get_reset_password_token(self, expires_in=600):
        return jwt.encode({"reset_password": self.id,
                           "exp": datetime.now(tz=timezone.utc) + timedelta(seconds=expires_in)},
                          app.config["SECRET_KEY"], algorithm="HS256")

    @staticmethod
    def verify_reset_password_token(token):
        try:
            id = jwt.decode(token, app.config["SECRET_KEY"], algorithms="HS256")[
                "reset_password"]
        except:           
            return None
        return User.query.get(id)
        
<
为了实现您想要的效果，您需要进行以下操作：

在 User 模型中添加一个字段来区分普通用户和企业账户。您已经添加了 user_type 字段，这是正确的做法。

创建一个新的模型来表示餐厅，包括餐厅的详细信息和座位预订信息。餐厅模型应与企业用户关联。

在 Flask 视图函数中，根据用户类型（普通用户或企业账户）渲染不同的模板。

以下是实现这些功能的建议：

模型
首先，我们需要创建一个新的餐厅模型。在 models.py 文件中添加以下内容：

class Restaurant(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(100), nullable=False)
    description = db.Column(db.String(500), nullable=True)
    seats = db.Column(db.Integer, nullable=False, default=0)
    user_id = db.Column(db.Integer, db.ForeignKey('user.id'))
    user = db.relationship('User', back_populates='restaurant')

User.restaurant = db.relationship('Restaurant', uselist=False, back_populates='user')

视图函数
接下来，在 views.py 文件中，根据用户类型创建视图函数。例如，创建一个用于显示个人资料的视图函数：

@app.route('/profile/<username>')
@login_required
def profile(username):
    user = User.query.filter_by(username=username).first_or_404()
    if user.user_type == 'regular':
        # 显示普通用户个人资料页面
        return render_template('profile_regular.html', user=user)
    else:
        # 显示企业用户餐厅资料页面
        return render_template('profile_restaurant.html', user=user)
       
HTML 模板
创建两个新的 HTML 模板，一个用于显示普通用户的个人资料（profile_regular.html），另一个用于显示企业用户的餐厅资料（profile_restaurant.html）。

profile_regular.html 示例：

{% extends 'base.html' %}
{% block content %}
  <h1>{{ user.username }}'s profile</h1>
  <p>About me: {{ user.about_me }}</p>
  <p>Last seen: {{ user.last_seen }}</p>
{% endblock %}

profile_restaurant.html 示例：

{% extends 'base.html' %}
{% block content %}
  <h1>{{ user.restaurant.name }}'s profile</h1>
  <p>Description: {{ user.restaurant.description }}</p>
  <p>Seats available: {{ user.restaurant.seats }}</p>
{% endblock %}

预订座位
为了允许普通用户预订座位，您需要创建一个新的视图函数和 HTML 模板。在视图函数中，您可以检查当前登录用户的类型，以确保只有普通用户可以预订座位。

视图函数示例：

@app.route('/restaurant/<int:restaurant_id>/book', methods=['GET', 'POST'])
@login_required
def book_seat(restaurant_id):
    restaurant = Restaurant.query.get_or_404(restaurant_id)
    if current_user.user_type == 'regular':
        # 允许普通用户预订座位
        # 在这里添加预订逻辑
        pass
    else:
        # 不允许企业用户预订座位
        flash('You are not allowed to book a seat as a restaurant owner.', 'error')
        return redirect(url_for('index'))
        
        
创建一个新的 HTML 模板（例如 book_seat.html），允许用户输入预订信息，然后提交表单以预订座位。

请注意，这里只是功能的概述。您可能需要根据实际需求调整视图函数、模板和模型。
